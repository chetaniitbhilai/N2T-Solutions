// Multiplier3x3.hdl
// 3-bit by 3-bit multiplier with partial product approach

CHIP Multiplier3x3 {
    IN a[3], b[3]; // 3-bit inputs
    OUT out[6]; // 6-bit product

    PARTS:
    // write your code here
    And(a = a[0] , b= b[0] , out= out[0]);
    And(a = a[1] , b= b[0] , out= temp1);
    And(a = a[0] , b= b[1] , out= temp2);
    HalfAdder( a = temp1, b= temp2 , sum = out[1] , carry = carry1);
    And(a = a[2] , b= b[0] , out= temp3);
    And(a = a[1] , b= b[1] , out= temp4);
    And(a = a[0] , b= b[2] , out= temp5);
    FullAdder( a = temp3 , b= temp4, c=temp5 , sum = temp6 ,carry = carry2 );
    FullAdder( a= temp6 , b= carry1 ,c=carry2, sum = out[2],carry= carry3);
    And(a = a[2] , b= b[1] , out= temp7);
    And(a = a[1] , b= b[2] , out= temp8);
    FullAdder(a=temp7,b=temp8, c=carry3, sum=out[3], carry= carry5);
    And(a=b[2],b=a[2] , out=temp9);
    HalfAdder(a=temp9, b= carry5 , sum= out[4],carry=out[5]);
}
