// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array buffer;
    field int buffer_len;
    field int str_len;

    /** Constructs a new empty String with a maximum length of maxLength. */
    constructor String new(int maxLength) {
        if (maxLength = 0) { let maxLength = 1; }
        let buffer = Array.new(maxLength);
        let buffer_len = maxLength;
        let str_len = 0;
        return this;
    }

    /** Frees the allocated memory for the string. */
    method void dispose() {
        do Array.dispose(buffer);
        return;
    }

    /** Returns the current length of the string. */
    method int length() {
        return str_len;
    }

    /** Retrieves the character at position j. */
    method char charAt(int j) {
        return buffer[j];
    }

    /** Updates the j-th character to c. */
    method void setCharAt(int j, char c) {
        let buffer[j] = c;
        return;
    }

    /** Appends character c to the string and returns the updated string. */
    method String appendChar(char c) {
        if (str_len < buffer_len) {
            let buffer[str_len] = c;
            let str_len = str_len + 1;
        }
        return this;
    }

    /** Removes the last character from the string. */
    method void eraseLastChar() {
        if (str_len > 0) { let str_len = str_len - 1; }
        return;
    }

    /** Converts the string to an integer up to the first non-numeric character. */
    method int intValue() {
        var int int_val;
        var int i;
        var boolean neg;
        let int_val = 0;

        if ((str_len > 0) & (buffer[0] = 45)) { // '-'
            let neg = true;
            let i = 1;
        } else {
            let neg = false;
            let i = 0;
        }

        while ((i < str_len) & String.is_digit(buffer[i])) {
            let int_val = (int_val * 10) + String.digit_val(buffer[i]);
            let i = i + 1;
        }

        return neg ? -int_val : int_val;
    }

    /** Checks if a character is a digit. */
    function boolean is_digit(char c) {
        return ~(c < 48) & ~(c > 57);
    }

    /** Returns the integer value of a digit character. */
    function int digit_val(char c) {
        return c - 48;
    }

    /** Converts an integer (0-9) to its character representation. */
    function char digit_char(int i) {
        return i + 48;
    }

    /** Sets the string to represent the given integer. */
    method void setInt(int number) {
        let str_len = 0; // Reset string
        if (number < 0) {
            let number = -number;
            do appendChar(45); // Leading '-'
        }
        do do_set_int(number);
        return;
    }

    method void do_set_int(int number) {
        var int q, mod;
        var char c;

        let q = number / 10;
        let mod = number - (q * 10);
        let c = String.digit_char(mod);

        if (number < 10) {
            do appendChar(c);
        } else {
            do do_set_int(q);
            do appendChar(c);
        }
        return;
    }

    /** Returns special character codes. */
    function char newLine() { return 128; }
    function char backSpace() { return 129; }
    function char doubleQuote() { return 34; }
}
